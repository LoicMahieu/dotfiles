[user]
	name = Loïc Mahieu
	email = mahieuloic@gmail.com

[push]
	default = matching

[alias]
	a = add -v
	aa = add -A -v .
	ap = add -p
	au = add -u -v

	br = branch
	done = !git fetch && git rebase origin/master && git checkout master && git merge @{-1} # && git push
	feature = checkout -b

	c = commit -v
	c- = commit -F-
	ca = !git add -u && git add . && git commit -v
	cu = !git add -u && git commit -v
	fix = commit --amend -C HEAD

	co = checkout

	ctags = "!sh -c '[ -f .git/hooks/ctags ] || git init; .git/hooks/ctags' git-ctags"

	d = diff
	dw = diff --color-words

	l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --abbrev-commit --date=iso
	head = !git l -1

	next = !git add . && git rebase --continue
	pp = !git pull --rebase && git push origin HEAD

	rec = !sh -c '(git add -p -- $@ && git commit -v) || git reset' -

	s = status -sb
	x = "!sh -c 'git status --porcelain | sed \"s/^...\\(.*\\)/\\1/\" | grep -i $1 | cut -f3 -d\" \"' -"

	staged = diff --cached
	unstage = reset HEAD --

	tags = tag -n1 -l

	; rmb = !sh -c 'git branch -D $1 && git push origin :$1' -
	; pp = !git pull && git push origin HEAD
	; hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	; untracked = "!sh -c 'git status -s --untracked-files | cut -f3 -d\" \" | grep \"$1\"' -"
	; up = !git fetch origin && git rebase origin/master[alias]


	##
	## https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig
	##

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Merge GitHub pull request on top of the `master` branch
	mpr = "!f() { \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git rebase master pr/$1 && \
			git checkout master && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"
